{"version":3,"sources":["pure_components/SearchBar.js","pure_components/card.js","pure_components/CardList.js","pure_components/Scroll.js","pure_components/ErrorBoundary.js","smart_components/App.js","index.js"],"names":["searchBox","searchChanged","className","type","placeholder","onChange","c1","id","name","email","alt","src","CL","robo","map","item","scrollBar","props","style","overflowY","height","children","EB","state","errorState","error","info","this","setState","React","Component","app","onSearchChange","e","searchedName","target","value","robots","setTimeout","fetch","then","responseData","json","data","catch","console","log","filteredList","filter","robot","toLowerCase","includes","length","SearchBar","Scroll","ErrorBoundary","ReactDOM","render","document","getElementById"],"mappings":"wPAiBeA,G,YAdG,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAChB,OAEI,cADA,CACA,OAAKC,UAAU,OAAf,UACI,uBACIC,KAAK,SACLC,YAAY,uBACZC,SAAYJ,IAEhB,mBAAGC,UAAU,sBCAVI,EAVJ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACjB,OACI,sBAAKP,UAAU,uDAAf,UACI,qBAAKQ,IAAK,QAAQC,IAAG,yCAAoCJ,EAApC,mBACrB,6BAAKC,IACL,4BAAIC,QCeDG,EAnBJ,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAQT,OACI,mCAEQA,EAAKC,KAAI,SAAAC,GACL,OAAO,cAAC,EAAD,CAAoBR,GAAIQ,EAAKR,GAAIC,KAAMO,EAAKP,KAAMC,MAAOM,EAAKN,OAAnDM,EAAKR,UCP5BS,EARG,SAACC,GACf,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,QAA1C,SACKH,EAAMI,YCmBJC,E,kDAnBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,YAAY,GAHP,E,8DAQKC,EAAOC,GACrBC,KAAKC,SAAW,CAACJ,YAAY,K,+BAI7B,OAAQG,KAAKJ,MAAMC,WACb,uDACAG,KAAKV,MAAMI,a,GAhBRQ,IAAMC,WCsERC,E,kDAhEX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CACVM,aAAcD,EAAEE,OAAOC,SAR3B,EAAKb,MAAQ,CACTc,OAAQ,GACRH,aAAc,IAJT,E,gEAiBO,IAAD,OACfI,YAAW,WAKXC,MAAM,iGACDC,MAAK,SAAAC,GAAY,OAAIA,EAAaC,UAClCF,MAAK,SAAAG,GAAI,OAAI,EAAKf,SAAS,CAACS,OAAQM,OACpCC,OAAM,SAACnB,GAAD,OAAWoB,QAAQC,IAAI,yCAA0CrB,QACzE,Q,+BAKE,IAAD,OACAsB,EAAepB,KAAKJ,MAAMc,OAAOW,QAAO,SAAAC,GACxC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAK5B,MAAMW,aAAagB,kBAKrE,OAASvB,KAAKJ,MAAMc,OAAOe,OAUvB,sBAAKlD,UAAY,KAAjB,UACI,oBAAIA,UAAU,KAAd,+BACA,uBACA,cAACmD,EAAD,CAAWpD,cAAe0B,KAAKK,iBAC/B,uBACA,cAACsB,EAAD,UACI,cAACC,EAAD,UACI,cAAC,EAAD,CAAI1C,KAAMkC,WAdtB,qBAAK7C,UAAU,YAAf,SACI,qBAAKA,UAAU,UAAf,qB,GA5CE4B,a,YCAlB0B,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,W","file":"static/js/main.0c32cecd.chunk.js","sourcesContent":["import React from 'react';\nimport \"./styledBar.css\";\n\nconst searchBox = ({searchChanged}) => {\n    return(\n        // class names used here are not part of tachyons but custom css\n        <div className=\"main\">\n            <input\n                type=\"search\"\n                placeholder=\"Search Robot names..\"\n                onChange = {searchChanged}\n            />\n            <i className=\"fa fa-search\"></i>\n        </div>\n    )\n}\n\nexport default searchBox;","import React from \"react\";\n\nconst c1 = ({id,name,email}) => {\n    return(\n        <div className=\"tc bg-light-green dib br3 pas3 ma2 grow bw2 shadow-5\">\n            <img alt =\"robos\" src={`https://robohash.org/bgset_bg1/${id}?size=200x200`}/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    );\n}\n\nexport default c1;","import React from \"react\";\nimport Card from \"./card\";\n\nconst CL = ({robo}) => {\n\n    // if you want to see Error Boundaries in action, uncomment the below 3 lines\n\n    // if (true){\n    //     throw Error('This was wilful!');\n    // }\n\n    return(\n        <>\n            {\n                robo.map(item => {\n                    return(<Card key={item.id} id={item.id} name={item.name} email={item.email}/>);\n                })\n            }\n        </>\n    );\n}\n\nexport default CL;\n\n\n// instead of direct destructuring, we can do:\n// const {id, name, email} = props \n// (can be any name for props)","const scrollBar = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', height: '72vh'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default scrollBar;","import React from 'react';\n\nclass EB extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            errorState: false\n        }\n    }\n\n    // New life-cycle method(hook)\n    componentDidCatch(error, info){\n        this.setState = {errorState: true}\n    }\n\n    render(){\n        return (this.state.errorState) \n            ? <h1>Oops, something broke</h1> \n            : this.props.children;\n    }\n}\n\nexport default EB;","import React, {Component} from 'react';\nimport './App.css';\nimport SearchBar from '../pure_components/SearchBar';\nimport CL from '../pure_components/CardList';\nimport Scroll from '../pure_components/Scroll';\nimport ErrorBoundary from '../pure_components/ErrorBoundary';\n\nclass app extends Component{\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchedName: ''\n        }\n    }\n\n    onSearchChange = (e) => {\n        this.setState({\n            searchedName: e.target.value\n        })\n    }\n\n    // Forcing the load-bar to first render and then my robo people\n    // Reacts lifecycle hook - Mount\n\n    componentDidMount(){\n        setTimeout(() => {\n\n        // Ajax call using the Fetch API to my personal github repo (containing a JSON file)\n        // RAW JSON file link from my github repo\n\n        fetch('https://raw.githubusercontent.com/StuartDaniells/JSON-placeholders/main/JSON_placeholder.json')\n            .then(responseData => responseData.json())\n            .then(data => this.setState({robots: data}))\n            .catch((error) => console.log('There seems to be an error, which is -', error))\n        }, 3200);\n    }\n\n    // After Fetch API is used, the Update - Life cycle hook methods get run [once of which is render()]\n\n    render(){\n        let filteredList = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchedName.toLowerCase())\n        })\n\n        // Ternary operator\n        \n        return (!this.state.robots.length) // same as -> this.state.robots.length === 0\n        // True\n        ?  (\n            <div className=\"container\">\n                <div className=\"loading\"> </div>\n            </div>\n            )\n        \n        // False \n        :  (\n            <div className = 'tc'>\n                <h1 className=\"f1\">Robot &nbsp; People</h1>\n                <br/>\n                <SearchBar searchChanged={this.onSearchChange} />\n                <hr/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CL robo={filteredList}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n            )\n    }\n}\n\nexport default app;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './smart_components/App';\nimport './index.css';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}